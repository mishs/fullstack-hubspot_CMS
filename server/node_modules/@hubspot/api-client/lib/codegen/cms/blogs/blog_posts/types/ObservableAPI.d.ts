import { Configuration } from '../configuration';
import { Observable } from '../rxjsStub';
import { AttachToLangPrimaryRequestVNext } from '../models/AttachToLangPrimaryRequestVNext';
import { BatchInputBlogPost } from '../models/BatchInputBlogPost';
import { BatchInputJsonNode } from '../models/BatchInputJsonNode';
import { BatchInputString } from '../models/BatchInputString';
import { BatchResponseBlogPost } from '../models/BatchResponseBlogPost';
import { BatchResponseBlogPostWithErrors } from '../models/BatchResponseBlogPostWithErrors';
import { BlogPost } from '../models/BlogPost';
import { BlogPostLanguageCloneRequestVNext } from '../models/BlogPostLanguageCloneRequestVNext';
import { CollectionResponseWithTotalBlogPostForwardPaging } from '../models/CollectionResponseWithTotalBlogPostForwardPaging';
import { CollectionResponseWithTotalVersionBlogPost } from '../models/CollectionResponseWithTotalVersionBlogPost';
import { ContentCloneRequestVNext } from '../models/ContentCloneRequestVNext';
import { ContentScheduleRequestVNext } from '../models/ContentScheduleRequestVNext';
import { DetachFromLangGroupRequestVNext } from '../models/DetachFromLangGroupRequestVNext';
import { SetNewLanguagePrimaryRequestVNext } from '../models/SetNewLanguagePrimaryRequestVNext';
import { UpdateLanguagesRequestVNext } from '../models/UpdateLanguagesRequestVNext';
import { VersionBlogPost } from '../models/VersionBlogPost';
import { BlogPostsApiRequestFactory, BlogPostsApiResponseProcessor } from "../apis/BlogPostsApi";
export declare class ObservableBlogPostsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BlogPostsApiRequestFactory, responseProcessor?: BlogPostsApiResponseProcessor);
    archive(objectId: string, archived?: boolean, _options?: Configuration): Observable<void>;
    archiveBatch(batchInputString: BatchInputString, _options?: Configuration): Observable<void>;
    attachToLangGroup(attachToLangPrimaryRequestVNext: AttachToLangPrimaryRequestVNext, _options?: Configuration): Observable<void>;
    clone(contentCloneRequestVNext: ContentCloneRequestVNext, _options?: Configuration): Observable<BlogPost>;
    create(blogPost: BlogPost, _options?: Configuration): Observable<BlogPost>;
    createBatch(batchInputBlogPost: BatchInputBlogPost, _options?: Configuration): Observable<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>;
    createLangVariation(blogPostLanguageCloneRequestVNext: BlogPostLanguageCloneRequestVNext, _options?: Configuration): Observable<BlogPost>;
    detachFromLangGroup(detachFromLangGroupRequestVNext: DetachFromLangGroupRequestVNext, _options?: Configuration): Observable<void>;
    getById(objectId: string, archived?: boolean, _options?: Configuration): Observable<BlogPost>;
    getDraftById(objectId: string, _options?: Configuration): Observable<BlogPost>;
    getPage(createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, sort?: Array<string>, after?: string, limit?: number, archived?: boolean, _options?: Configuration): Observable<CollectionResponseWithTotalBlogPostForwardPaging>;
    getPreviousVersion(objectId: string, revisionId: string, _options?: Configuration): Observable<VersionBlogPost>;
    getPreviousVersions(objectId: string, after?: string, before?: string, limit?: number, _options?: Configuration): Observable<CollectionResponseWithTotalVersionBlogPost>;
    pushLive(objectId: string, _options?: Configuration): Observable<void>;
    readBatch(batchInputString: BatchInputString, archived?: boolean, _options?: Configuration): Observable<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>;
    resetDraft(objectId: string, _options?: Configuration): Observable<void>;
    restorePreviousVersion(objectId: string, revisionId: string, _options?: Configuration): Observable<BlogPost>;
    restorePreviousVersionToDraft(objectId: string, revisionId: number, _options?: Configuration): Observable<BlogPost>;
    schedule(contentScheduleRequestVNext: ContentScheduleRequestVNext, _options?: Configuration): Observable<void>;
    setLangPrimary(setNewLanguagePrimaryRequestVNext: SetNewLanguagePrimaryRequestVNext, _options?: Configuration): Observable<void>;
    update(objectId: string, blogPost: BlogPost, archived?: boolean, _options?: Configuration): Observable<BlogPost>;
    updateBatch(batchInputJsonNode: BatchInputJsonNode, archived?: boolean, _options?: Configuration): Observable<BatchResponseBlogPostWithErrors | BatchResponseBlogPost>;
    updateDraft(objectId: string, blogPost: BlogPost, _options?: Configuration): Observable<BlogPost>;
    updateLangs(updateLanguagesRequestVNext: UpdateLanguagesRequestVNext, _options?: Configuration): Observable<void>;
}
