"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const HttpClient_1 = require("./services/http/HttpClient");
const Request_1 = require("./services/http/Request");
const initObject_1 = require("./services/initObject");
class Client {
    constructor(config = {}) {
        this.config = config;
        this.init();
    }
    init() {
        this._automation = undefined;
        this._cms = undefined;
        this._communicationPreferences = undefined;
        this._conversations = undefined;
        this._crm = undefined;
        this._events = undefined;
        this._files = undefined;
        this._marketing = undefined;
        this._oauth = undefined;
        this._settings = undefined;
        this._webhooks = undefined;
    }
    get automation() {
        if (!this._automation) {
            this._automation = (0, initObject_1.initObject)('automation/AutomationDiscovery', this.config);
        }
        return this._automation;
    }
    get cms() {
        if (!this._cms) {
            this._cms = (0, initObject_1.initObject)('cms/CmsDiscovery', this.config);
        }
        return this._cms;
    }
    get communicationPreferences() {
        if (!this._communicationPreferences) {
            this._communicationPreferences = (0, initObject_1.initObject)('communicationPreferences/CommunicationPreferencesDiscovery', this.config);
        }
        return this._communicationPreferences;
    }
    get conversations() {
        if (!this._conversations) {
            this._conversations = (0, initObject_1.initObject)('conversations/ConversationsDiscovery', this.config);
        }
        return this._conversations;
    }
    get crm() {
        if (!this._crm) {
            this._crm = (0, initObject_1.initObject)('crm/CrmDiscovery', this.config);
        }
        return this._crm;
    }
    get events() {
        if (!this._events) {
            this._events = (0, initObject_1.initObject)('events/EventsDiscovery', this.config);
        }
        return this._events;
    }
    get files() {
        if (!this._files) {
            this._files = (0, initObject_1.initObject)('files/FilesDiscovery', this.config);
        }
        return this._files;
    }
    get marketing() {
        if (!this._marketing) {
            this._marketing = (0, initObject_1.initObject)('marketing/MarketingDiscovery', this.config);
        }
        return this._marketing;
    }
    get oauth() {
        if (!this._oauth) {
            this._oauth = (0, initObject_1.initObject)('oauth/OauthDiscovery', this.config);
        }
        return this._oauth;
    }
    get settings() {
        if (!this._settings) {
            this._settings = (0, initObject_1.initObject)('settings/SettingsDiscovery', this.config);
        }
        return this._settings;
    }
    get webhooks() {
        if (!this._webhooks) {
            this._webhooks = (0, initObject_1.initObject)('webhooks/WebhooksDiscovery', this.config);
        }
        return this._webhooks;
    }
    setAccessToken(token) {
        this.config.accessToken = token;
        this.init();
    }
    setApiKey(apiKey) {
        this.config.apiKey = apiKey;
        this.init();
    }
    setDeveloperApiKey(developerApiKey) {
        this.config.developerApiKey = developerApiKey;
        this.init();
    }
    apiRequest(opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new Request_1.Request(this.config, opts);
            return yield HttpClient_1.HttpClient.send(request);
        });
    }
}
exports.Client = Client;
//# sourceMappingURL=client.js.map